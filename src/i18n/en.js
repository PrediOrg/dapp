export default {
    walletBalance: "Wallet Balance",
    collect:"Collect",
    approve:"Approve",
    ticket: "License",
    category: "Category",
    sortBy: "Sort By",
    issue: "Issue",
    confirm: "Confirm",
    detail: "Detail",
    stakingType: "Collateral",
    stakingTypeInfo: "To prevent issuer from confirming result viciously,please stake tokens or current NFT.",
    subscriptionAmount: "Subscription Amount",
    subscription: "Subscription",
    subscribe:"Buy",
    max: "Max",
    marketClosed: "Market Closed",
    deposit: "Add",
    verifiedNFT: "Check Verified License",
    select: "Select",
    selected: "Selected",
    moreNFT: "Get more License",
    forecastEvent: "Event",
    subscribeEndDate: "Last Trading Day",
    specifyExpiryDate: "Specify Expiry Date",
    endDate: "End Date",
    validityPeriod: "Expiration Date",
    marketEndDate: "Expiration Date",
    liquidityMin:"Liquidity Min",
    premiumMin:"Premium Min",
    paymentCurrency: "Payment Currency",
    defaultOdds: "Default Leverage",
    setDefaultOdds: "Set Leverage",
    minInvestAmout: "Set The Minimum Investment Amount",
    depositMargin: "Add Liquidity",
    totalPayment: "Total Payment",
    rewards: "Rewards",
    rewardRate: "Reward Rate",
    release: "Release",
    fee: "Fee",
    marginFeeRate: "Fee Rate",
    cdsInfoOne: "When issue a prediction product, you have to stake the margin, set the default odds and the minimum investment amount.",
    cdsInfoTwo: "Unparticipating margin can be withdrawn at any time.",
    cdsInfoThree: "If more than 1 of the users choose to appeal the judgment result, the community governance mechanism will be initiated to determine whether the prediction event has occurred.",
    deposited: "Invested",
    issued: "Issued",
    depositedCDS: "invested products",
    totalProfit: "Total Profit",
    allOrDeposited: "Total/Deposited",
    rewardsOrProfit: "Rewards/Profit",
    estimatedInvested:"Estimated/Invested",
    profit: "Profit",
    yesterdayProfit: "Profit Yesterday",
    status: "Status",
    eventConfirming: "Event confirming",
    appeal: "Appeal",
    appealing: "Appealing",
    appealFailed: "Appeal Failed",
    occured: "Occured",
    notOccured: "Not Occured",
    governanceMechanism: "Initiate governance mechanism when the number of appeal exceeds one person.",
    appealLimit: "The number of appeal is not more than one person.",
    waitResult: "Waiting For Appeal Result",
    frozenMargin: "Frozen Margin",
    marginBalance: "Margin balance",
    balance: "Balance",
    withdraw: "Withdraw",
    endTime: "Countdown To End",
    guaranteeing: "InProgress",
    guaranteeingEvent:"Prediction in progress",
    confirmsEventAdvance:"Event confirms occured in advance.",
    waitConfirmation:"Event is waiting for confirmation.",
    triggerEvent: "Event is confirmed to be occured.",
    notTriggerEvent: "Event  does not occur.",
    defaultChallenging:"Event occured, and is on challenging.",
    notDefaultChallenging:"Event did not occur, and is on challenging.",
    defaultChallengeFailed:"Event occured,and challenge failed.",
    notDefaultChallengeFailed:"Event did not occur,and challenge failed.",
    defaultWaitingResult:"Event occured,and is waiting for governance mechanism results.",
    notDefaultWaitingResult:"Event did not occur,and is waiting for governance mechanism results.",
    defaultGovernanceMechanism:"Governance mechanism confirms event occured.",
    notDefaultGovernanceMechanism:"Governance mechanism confirms that event does not occur.",
    cancel: "Cancel",
    defaultAhead:"Occured Ahead",
    occur: "Occured",
    notOccur: "Not occured",
    stakingToChallenge:"Staking to Challenge",
    challenged:"Challenged",
    checking: "Checking",
    fail: "Fail",
    short:{
        confirmsEventAdvance:"Occured In Advance",
        waitConfirmation:"Waiting For Confirmation",
        defaultChallenging:"Occured-Challenging",
        notDefaultChallenging:"Not Occured-Challenging",
        defaultChallengeFailed:"Occured-Challenge Failed",
        notDefaultChallengeFailed:"Not Occured-Challenge Failed",
        defaultWaitingResult:"Occured-Governing",
        notDefaultWaitingResult:"Not Occured-Governing",
        defaultGovernanceMechanism:"Occured-Governance Confirmed",
        notDefaultGovernanceMechanism:"Not Occured-Governance Confirmed"
    },
    appealInfoOne: 'If you think that the judgment of the current prediction event deviates from the facts, you can "Challenge" and start the governance mechanism to finally determine the current prediction result.',
    check: "Check",
    contentIllegal: "Prediction event involves content illegal, please edit the content again to issue",
    subscribed: "Invested products",
    receivingCompensation: "Pending",
    received: "Total Payoff",
    receive: "Receive",
    compensationAmount: "Occured compensation amount",
    liquidity: "Liquidity",
    injectLiquidity: "Inject Liquidity",
    uRLContent:"URL/Content",
    resolutionSource:"Resolution Source",
    textareaInfo: "Please describe this event briefly.",
    wallet: {
        openWallet: "Open Wallet",
        connectWallet: "Connect Wallet",
        connectingWallet: 'Connecting Wallet',
        connectYourWallet: "Connect your wallet"
    },
    NFT: {
        common: "Common",
        scarcity: "Scarcity",
        attributive: "Attributive",
        numbers: "Issue Number",
        issueTip:"Issue 10 prediction Markets/License",
        price: "Price",
        success: "Success",
        getNFT: "Get License successfully",
        issueCDS: "Issue Predi Markets",
        buyNow: "Buy Now",
        mintNow: "Mint Now",
        rule: "Rule"
    }

}
